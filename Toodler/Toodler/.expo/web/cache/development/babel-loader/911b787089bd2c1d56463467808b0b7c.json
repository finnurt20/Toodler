{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\hr\\\\\\xF6nn3\\\\Final_app\\\\Toddler\\\\Toodler\\\\Toodler\\\\src\\\\views\\\\Lists\\\\index.jsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { getBoardLists } from \"../../services/fileService\";\nimport logo from \"../../resources/logo.png\";\nimport styles from \"./styles\";\nimport data from \"../../resources/data.json\";\nimport Lister from \"../../components/Lister\";\nimport Toolbar from \"../../components/Toolbar\";\n\nvar Lists = function (_React$Component) {\n  _inherits(Lists, _React$Component);\n\n  var _super = _createSuper(Lists);\n\n  function Lists() {\n    var _this;\n\n    _classCallCheck(this, Lists);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      currentList: []\n    };\n    return _this;\n  }\n\n  _createClass(Lists, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var list = [];\n      var navigation = this.props.navigation;\n      var boardId = navigation.getParam('boardid', '');\n\n      for (var i = 0; i < data.lists.length; i++) {\n        if (data.lists[i].boardId == boardId) {\n          list.push(data.lists[i]);\n        }\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 5\n        }\n      }, React.createElement(Toolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }\n      }), React.createElement(Lister, {\n        lists: list,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Lists;\n}(React.Component);\n\n;\nexport default Lists;","map":{"version":3,"sources":["D:/hr/Ã¶nn3/Final_app/Toddler/Toodler/Toodler/src/views/Lists/index.jsx"],"names":["React","getBoardLists","logo","styles","data","Lister","Toolbar","Lists","state","currentList","list","navigation","props","boardId","getParam","i","lists","length","push","flex","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAIA,SAASC,aAAT;AACA,OAAOC,IAAP;AACA,OAAOC,MAAP;AACA,OAAOC,IAAP;AACA,OAAOC,MAAP;AACA,OAAOC,OAAP;;IAEMC,K;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE;AADP,K;;;;;;;;;;;;;;;;;;;6BAOC;AAGP,UAAIC,IAAI,GAAG,EAAX;AAHO,UAICC,UAJD,GAIgB,KAAKC,KAJrB,CAICD,UAJD;AAKP,UAAME,OAAO,GAAGF,UAAU,CAACG,QAAX,CAAoB,SAApB,EAA+B,EAA/B,CAAhB;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACX,IAAI,CAACY,KAAL,CAAWC,MAA3B,EAAmCF,CAAC,EAApC,EAAuC;AACrC,YAAIX,IAAI,CAACY,KAAL,CAAWD,CAAX,EAAcF,OAAd,IAAyBA,OAA7B,EAAqC;AACnCH,UAAAA,IAAI,CAACQ,IAAL,CAAUd,IAAI,CAACY,KAAL,CAAWD,CAAX,CAAV;AACD;AACF;;AACD,aACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACI,UAAAA,IAAI,EAAE;AAAP,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAET,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADA;AAMD;;;;EAzBiBV,KAAK,CAACoB,S;;AA0BzB;AAED,eAAeb,KAAf","sourcesContent":["import React from 'react';\r\nimport {\r\n  View, Image, Text, TouchableHighlight,\r\n} from 'react-native';\r\nimport { getBoardLists } from '../../services/fileService';\r\nimport logo from '../../resources/logo.png';\r\nimport styles from './styles';\r\nimport data from '../../resources/data.json';\r\nimport Lister from '../../components/Lister';\r\nimport Toolbar from '../../components/Toolbar';\r\n\r\nclass Lists extends React.Component {\r\n  state = {\r\n    currentList: [],\r\n  }\r\n  async componentDidMount() {\r\n\r\n  }\r\n\r\n  render() {\r\n    //Make a new list with the lists the have the boarId assoiciated\r\n    //And send it to the Lister component\r\n    var list = [];\r\n    const { navigation } = this.props;\r\n    const boardId = navigation.getParam('boardid', '');\r\n    for (let i=0; i<data.lists.length; i++){\r\n      if (data.lists[i].boardId == boardId){\r\n        list.push(data.lists[i])\r\n      }\r\n    }\r\n    return (\r\n    <View style={{flex: 1} }>\r\n      <Toolbar />\r\n      <Lister lists={list}/>\r\n    </View>\r\n    )\r\n  };\r\n};\r\n\r\nexport default Lists;\r\n"]},"metadata":{},"sourceType":"module"}