{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FileSystem from 'expo-file-system';\nvar listDirectory = FileSystem.documentDirectory + \"lists\";\n\nvar onException = function onException(cb, errorHandler) {\n  try {\n    return cb();\n  } catch (err) {\n    if (errorHandler) {\n      return errorHandler(err);\n    }\n\n    console.error(err);\n  }\n};\n\nvar setupDirectory = function setupDirectory() {\n  var dir;\n  return _regeneratorRuntime.async(function setupDirectory$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(listDirectory));\n\n        case 2:\n          dir = _context.sent;\n\n          if (dir.exists) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(FileSystem.makeDirectoryAsync(listDirectory));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport var getBoardLists = function getBoardLists() {\n  var result;\n  return _regeneratorRuntime.async(function getBoardLists$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(setupDirectory());\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(onException(function () {\n            return FileSystem.readDirectoryAsync(listDirectory);\n          }));\n\n        case 4:\n          result = _context3.sent;\n          return _context3.abrupt(\"return\", Promise.all(result.map(function _callee(boardid) {\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    return _context2.abrupt(\"return\", {\n                      name: \"name\",\n                      boardId: boardid\n                    });\n\n                  case 1:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          })));\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["D:/hr/Ã¶nn3/Final_app/Toddler/Toodler/Toodler/src/services/fileService.js"],"names":["FileSystem","listDirectory","documentDirectory","onException","cb","errorHandler","err","console","error","setupDirectory","getInfoAsync","dir","exists","makeDirectoryAsync","getBoardLists","readDirectoryAsync","result","Promise","all","map","boardid","name","boardId"],"mappings":";AAAA,OAAO,KAAKA,UAAZ,MAA4B,kBAA5B;AACA,IAAMC,aAAa,GAAMD,UAAU,CAACE,iBAAjB,UAAnB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAKC,YAAL,EAAsB;AACxC,MAAI;AACF,WAAOD,EAAE,EAAT;AACD,GAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,QAAID,YAAJ,EAAkB;AAChB,aAAOA,YAAY,CAACC,GAAD,CAAnB;AACD;;AACDC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CATD;;AAWA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACHT,UAAU,CAACU,YAAX,CAAwBT,aAAxB,CADG;;AAAA;AACfU,UAAAA,GADe;;AAAA,cAEhBA,GAAG,CAACC,MAFY;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGbZ,UAAU,CAACa,kBAAX,CAA8BZ,aAA9B,CAHa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAOA,OAAO,IAAMa,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACrBL,cAAc,EADO;;AAAA;AAAA;AAAA,2CAENN,WAAW,CAAC;AAAA,mBAAMH,UAAU,CAACe,kBAAX,CAA8Bd,aAA9B,CAAN;AAAA,WAAD,CAFL;;AAAA;AAErBe,UAAAA,MAFqB;AAAA,4CAGpBC,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,GAAP,CAAW,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA,sDACrB;AACLC,sBAAAA,IAAI,EAAE,MADD;AAELC,sBAAAA,OAAO,EAAEF;AAFJ,qBADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAX,CAAZ,CAHoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["import * as FileSystem from 'expo-file-system';\r\nconst listDirectory = `${FileSystem.documentDirectory}lists`;\r\n\r\nconst onException = (cb, errorHandler) => {\r\n  try {\r\n    return cb();\r\n  } catch (err) {\r\n    if (errorHandler) {\r\n      return errorHandler(err);\r\n    }\r\n    console.error(err);\r\n  }\r\n}\r\n\r\nconst setupDirectory = async () => {\r\n  const dir = await FileSystem.getInfoAsync(listDirectory);\r\n  if (!dir.exists) {\r\n    await FileSystem.makeDirectoryAsync(listDirectory);\r\n  }\r\n}\r\n\r\nexport const getBoardLists = async () => {\r\n  await setupDirectory();\r\n  const result = await onException(() => FileSystem.readDirectoryAsync(listDirectory));\r\n  return Promise.all(result.map(async boardid => {\r\n    return {\r\n      name: \"name\",\r\n      boardId: boardid\r\n    };\r\n  }));\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}